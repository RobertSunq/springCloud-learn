<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--公司或者组织的唯一标志，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成-->
    <groupId>org.qing</groupId>
    <!--本项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的-->
    <artifactId>springcloud</artifactId>
    <!--项目当前的版本号-->
    <version>1.0-SNAPSHOT</version>
    <!--打包的机制，如pom,jar, maven-plugin, ejb, war, ear, rar, par，默认为jar-->
    <packaging>pom</packaging>
    <!--  &lt;!&ndash;另起一个项目名展示给用户&ndash;&gt;-->
    <!--  <name>maven</name>-->
    <!--  &lt;!&ndash;项目主页的URL, Maven产生的文档用&ndash;&gt;-->
    <!--  <url>http://url</url>-->
    <!--  &lt;!&ndash;项目的详细描述, Maven 产生的文档用。&ndash;&gt;-->
    <!--  <description>A maven project to study maven.</description>-->

    <!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径-->
    <modules>
        <!--子项目相对路径-->
        <module>cloud-provider-payment18001</module>
        <module>test-something</module>
        <module>cloud-consumer-order180</module>
        <module>cloud-api-commons</module>
        <module>cloud-eureka-server17001</module>
        <module>cloud-eureka-server17002</module>
        <module>cloud-provider-payment18002</module>
        <module>cloud-provider-payment18006</module>
        <module>cloud-consumer-zk-order186</module>
        <module>cloud-provider-payment18010_consul</module>
        <module>cloud-consumer-order190-consul</module>
        <module>cloud-consumer-order195-feign</module>
    </modules>

    <!-- 统一管理jar包版本，为pom定义一些常量，在pom中的其它地方可以直接引用 -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <junit.version>4.12</junit.version>
        <log4j.version>1.2.17</log4j.version>
        <lombok.version>1.18.12</lombok.version>
        <mysql.version>5.1.47</mysql.version>
        <druid.version>1.1.16</druid.version>
        <mybatis.spring.boot.version>1.3.0</mybatis.spring.boot.version>
        <!-- 依赖版本 -->
        <spring-boot.version>2.3.2.RELEASE</spring-boot.version>
    </properties>

    <!-- 子模块继承之后，提供作用：锁定版本+子modlue不用写groupId和version 。一般用于父工程，只做声明而不做实现引入，在子工程中声明的才会引入-->
    <!--继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,它并不会被运行，就是不会营造实际的依赖，
    主要用于父模块中定义供子模块使用,而当子项目声明一个依赖（必须描述group ID和artifact ID信息），
    如果group ID和artifact ID以外的一些信息没有描述，则通过 group ID和artifact ID匹配到这里的依赖，并使用这里的依赖信息-->
    <dependencyManagement>
        <dependencies>
            <!--spring boot 2.2.2-->
            <dependency>
                <!--G-A-V    三要素-->
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>2.2.2.RELEASE</version>
                <type>pom</type>
                <!--标签内为test时表示该项依赖（这个jar）只能在test时起到作用，打包编译发布后不起作用-->
                <!--scope属性值：-->
                <!--compile：默认的范围，在编译测试，运行都有效，在依赖项dependency中不写，也就是不指定scope标签，即表示默认；-->
                <!--provided：在编译和测试的时候有效-->
                <!--runtime：在测试和运行时有效-->
                <!--test：只在测试范围内有效-->
                <!--system：在编译和测试是有效，与本机系统相关联，可移植性差-->
                <!--improt：导入的依赖范围，它只使用在dependencyManagement中，表示从其它的pom中导入dependency的配置。-->
                <scope>import</scope>
            </dependency>
            <!--spring cloud Hoxton.SR1-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>Hoxton.SR1</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--spring cloud alibaba 2.1.0.RELEASE-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>2.1.0.RELEASE</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${druid.version}</version>
            </dependency>
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>${mybatis.spring.boot.version}</version>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>${junit.version}</version>
            </dependency>
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>${log4j.version}</version>
            </dependency>
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <optional>true</optional>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <!--构建配置-->
    <build>
        <!--        &lt;!&ndash;项目相关的所有资源路径列表，例如和项目相关的配置文件、属性文件，这些资源被包含在最终的打包文件里.&ndash;&gt;-->
        <!--        <resources>-->
        <!--            <resource>-->
        <!--                &lt;!&ndash;描述存放资源的目录，该路径相对POM路径&ndash;&gt;-->
        <!--                <directory>src/main/resources</directory>-->
        <!--            </resource>-->
        <!--            <resource>-->
        <!--                &lt;!&ndash;描述存放资源的目录，该路径相对POM路径&ndash;&gt;-->
        <!--                <directory>src/main/java</directory>-->
        <!--                &lt;!&ndash;包含的模式列表&ndash;&gt;-->
        <!--                <includes>-->
        <!--                    <include>**/*.xml</include>-->
        <!--                </includes>-->
        <!--            </resource>-->
        <!--        </resources>-->

        <!--使用的插件列表.-->
        <plugins>
            <!--描述插件所需要的信息。-->
            <plugin>
                <!--插件在仓库里的group ID-->
                <groupId>org.springframework.boot</groupId>
                <!--插件在仓库里的artifact ID-->
                <artifactId>spring-boot-maven-plugin</artifactId>
                <!--被使用的插件的版本（或版本范围)-->
                <version>${spring-boot.version}</version>
                <!--<version>****</version>-->
                <configuration>
                    <fork>true</fork>
                    <addResources>true</addResources>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>